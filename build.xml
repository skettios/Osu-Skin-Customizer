<project name="Experience-Engine" default="build" basedir=".">
    <!-- Global Properties -->
    <property file="build.properties"/>
    <property environment="env"/>
    <property name="build_number" value="${env.BUILD_NUMBER}"/>

    <path id="classpath">
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="clean">
        <echo>Cleaning up for compilation and packaging...</echo>
        <delete dir="temp"/>
        <delete dir="dist"/>
    </target>

    <target name="clean_all" depends="clean">
        <delete dir="lib"/>
        <delete dir="out"/>
    </target>

    <target name="install" depends="clean, download-dependencies" unless="commons.exists, gson.exists">
        <echo>Installing libraries for compilation and development...</echo>
        <copy todir="lib">
            <fileset dir="${commons.temp.path}"/>
        </copy>
        <copy todir="lib">
            <fileset dir="${gson.temp.path}"/>
        </copy>
        <delete dir="temp"/>
    </target>

    <target name="check-lib">
        <available property="commons.exists" file="${commons.path}" type="dir"/>
        <available property="gson.exists" file="${gson.path}" type="dir"/>
    </target>

    <target name="download-dependencies" depends="check-lib">
		<mkdir dir="${commons.temp.path}"/>
        <mkdir dir="${gson.temp.path}"/>
		<antcall target="download-commons"/>
        <antcall target="download-gson"/>
        <echo>Finished downloading dependencies...</echo>
    </target>

    <target name="download-commons" unless="commons.exists">
        <echo>Getting Commons-IO</echo>
        <get src="${commons.url}" dest="${commons.temp.path}"/>
        <echo>Unzipping Common-IO</echo>
        <unzip src="${commons.file}" dest="${commons.temp.path}">
            <patternset>
                <include name="**/commons-io-2.4.jar"/>
            </patternset>
        </unzip>
        <delete file="${commons.file}"/>
    </target>

    <target name="download-gson" unless="gson.exists">
        <echo>Getting Gson</echo>
        <get src="${gson.url}" dest="${gson.temp.path}"/>
        <echo>Unzipping Gson</echo>
        <unzip src="${gson.file}" dest="${gson.temp.path}">
            <patternset>
                <include name="**/gson-2.2.4.jar"/>
            </patternset>
        </unzip>
        <delete file="${gson.file}"/>
    </target>

    <target name="prepare_compile" depends="clean">
        <echo>Preparing folders for compilation and packaging...</echo>
        <mkdir dir="${app.artifact}"/>
        <mkdir dir="${app.temp.src}"/>
        <mkdir dir="${app.out}"/>
        <mkdir dir="${app.artifact}"/>

        <mkdir dir="${release.temp.artifact}"/>
        <mkdir dir="${release.artifact}"/>

        <echo>Preparing ${engine.name}...</echo>
        <echo>Copying source to temporary location...</echo>
        <copy todir="${app.temp.src}">
            <fileset dir="${app.src}" includes="**/*.java"/>
        </copy>

        <unzip src="${commons.jar}" dest="${app.out}"/>
        <unzip src="${gson.jar}" dest="${app.out}"/>

        <echo>Replacing tokens in ${engine.name} source...</echo>
        <replace dir="${app.temp.src}" token="@VERSION@" value="${app.version}.${build_number}"/>
    </target>

    <target name="compile" depends="prepare_compile">
        <echo>Compiling ${engine.name}...</echo>
        <javac includeantruntime="false" srcdir="${app.temp.src}" destdir="${app.out}">
            <classpath refid="classpath"/>
        </javac>
        <echo>Building ${engine.name} jars...</echo>
        <copy todir="${app.out}">
            <fileset dir="${app.src}" excludes="**/*.java"/>
        </copy>
        <jar manifest="${app.manifest}" jarfile="${app.artifact}/${app.name}-${app.version}.${build_number}.jar" basedir="${app.out}"/>
    </target>

    <target name="prepare_release" depends="compile">
        <echo>Preparing for release...</echo>
        <echo>Copying files to temporary location...</echo>
        <copy file="${app.artifact}/${app.name}-${app.version}.${build_number}.jar" todir="${release.temp.artifact}"/>
        <copy file="LICENSE" todir="${release.temp.artifact}"/>
        <copy file="Tabs.json" todir="${release.temp.artifact}"/>
        <copy file="Categories.json" todir="${release.temp.artifact}"/>
        <copy file="Current.json" todir="${release.temp.artifact}"/>
        <copy file="Addons.json" todir="${release.temp.artifact}"/>
        <copy file="ReadMe.txt" todir="${release.temp.artifact}"/>
    </target>

    <target name="build" depends="install, prepare_release">
        <echo>Zipping built jars...</echo>
        <zip destfile="${release.artifact}/${release.name}.zip" basedir="${release.temp.artifact}"/>
        <delete dir="temp"/>
        <echo>Finished build ${engine.name}</echo>
        <echo>Latest version of ${app.name} is ${app.version}.${build_number}.</echo>
    </target>
</project>
